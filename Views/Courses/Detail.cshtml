@model EscolaDeVoce.Services.ViewModel.CourseViewModel

@{
    ViewData["Title"] = "Cadastro de Curso";
    Guid Id = Guid.Empty;
    var image = "";
    
    if(Model != null){
      Id = @Model.Id;
      image = Model.image;
    }
}

@section scripts {
    <script>
        function sendVideo(mediaId, courseId){
            var dados = $("#newVideo").serialize();
            dados += "&sambatech_id=" + mediaId;
            console.log(dados);
            $.ajax({
                url: "/courses/savemedia",
                type: "post",
                data: dados,
                success: function(data){
                    console.log(data);
                }, error: function(err){
                    
                }
            });
        }
    </script>
}

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Cadastro de Curso</h3>
  </div>
  <div class="panel-body">
    <div>
          <!-- Provides extra visual weight and identifies the primary action in a set of buttons -->
        <a asp-controller="Courses" asp-action="Index" class="btn btn-primary"><span class="glyphicon glyphicon-list-alt" aria-hidden="true"></span> Lista</a>
        @if(Model != null){
        <a asp-controller="Courses" asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-primary"><span class="glyphicon glyphicon-remove" aria-hidden="true"></span> Deletar</a>
        }
      </div>
      <br />
    <form asp-controller="Courses" asp-action="Detail" asp-route-id="@Id" method="post" enctype="multipart/form-data">    
        <input type="hidden" name="image" value="@image">
        
        <img src="~/images/specialists/@image" style="height: 100px" />

        <div class="form-group">
            @Html.LabelFor(m => m.name)
            @Html.TextBoxFor(m => m.name, new { @class = "form-control" })
        </div>
        <div class="form-group">
            <label for="schoolId">Escola</label>
            @await Component.InvokeAsync("SchoolCombo")
        </div>
        <div class="form-group">
            <label for="categoriesId">Escola</label>
            @await Component.InvokeAsync("CategoriesCombo")
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.description)
            @Html.TextBoxFor(m => m.description, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.duration)
            @Html.TextBoxFor(m => m.duration, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.views)
            @Html.TextBoxFor(m => m.views, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.free)
            <input asp-for="free" />
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.order)
            @Html.TextBoxFor(m => m.order, new { @class = "form-control" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.image)
            <input type="file" name="files" id="files" multiple/>
        </div>
        <button type="submit" class="btn btn-default">Submit</button>
    </form>

    @if(Model != null){
        <div>
            <h1>Novo vídeo</h1>
            <form method="post" id="newVideo">
                <input type="hidden" value="@Model.Id" name="courseId" id="courseId" />
                <div class="form-group">
                    <label for="name">name</label>
                    <input class="form-control" id="name" name="name" type="text">
                </div>
                <div class="form-group">
                    <label for="name">Ordem</label>
                    <input class="form-control" id="order" name="order" type="text">
                </div>
                <div class="form-group">
                    <label for="name">Views</label>
                    <input class="form-control" id="views" name="views" type="text">
                </div>
                <div class="form-group">
                    <label for="freeVideo">Grátis?</label>
                    <input name="freeVideo" id="freeVideo" type="checkbox" />
                </div>
                <div class="form-group">
                    <label for="schoolId">Escola</label>
                    @await Component.InvokeAsync("SchoolCombo")
                </div>
                <div class="form-group">
                    <label for="categoriesId">Escola</label>
                    @await Component.InvokeAsync("CategoriesCombo")
                </div>
                <div class="form-group">
                    <script samba-upload-widget="samba" src="http://static.sambavideos.sambatech.com/upload/latest/widget.js"></script>
                    <script>
                        var sambaUploadWidget = new SambaUploadWidget({
                            upload_key: '8dd11ea2439580702bf3bcd479d2ce8e'	
                        }); 

                        sambaUploadWidget.wEvents.addEventListener('upload_progress', function(evt) { 
                            
                        });
                        sambaUploadWidget.wEvents.addEventListener('upload_completed', function(evt) { 
                            sendVideo(evt.media.id, '@Model.Id');
                        });
                    </script>
                </div>
            </form>
        </div>
    }

    <!--<div>
        <div id="player"></div>
        <script samba-player-api="player" type="text/javascript" src="http://player.sambatech.com.br/v3/samba.player.api.js"></script>
        <script>
            var player = new SambaPlayer("player", { //player é o ID do elemento html que ele vai inserir o iframe
                height: 360,
                width: 640,
                ph: "3b8e50510d562d8d8b101c66f59bf625",//Player Hash do projeto
                m: "68318c03ab062dc8370387644deb08b2",//MidiaID
                playerParams: { //Veja a lista de Parâmetros suportados
                    enableShare: true,
                    wideScreen: true
                },
                events: { //Funcoes que escutam os eventos do player
                    "onLoad": function(){}, //Sendo que eventListener deve ser uma função já presente na página
                    "onStart": function(){},
                    "onFinish": function(){}
                }
            });
        </script>
        
    </div>-->

  </div>
</div>